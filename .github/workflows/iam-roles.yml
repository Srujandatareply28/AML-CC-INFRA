name: AWS IAM User Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options:
          - create
          - delete
          - list
      username:
        description: 'Base username for IAM users (e.g., aml-user)'
        required: false
        default: 'aml-user'
        type: string
      user_count:
        description: 'Number of users to create (1-10)'
        required: false
        default: '1'
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  iam-management:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-IAM-Management
      
      - name: Validate inputs
        run: |
          if [[ "${{ github.event.inputs.action }}" == "create" || "${{ github.event.inputs.action }}" == "delete" ]]; then
            if [[ -z "${{ github.event.inputs.username }}" ]]; then
              echo "Error: Username is required for create/delete actions"
              exit 1
            fi
            
            user_count="${{ github.event.inputs.user_count }}"
            if ! [[ "$user_count" =~ ^[1-9]$|^10$ ]]; then
              echo "Error: User count must be between 1 and 10"
              exit 1
            fi
          fi
      
      - name: Create IAM Users
        if: github.event.inputs.action == 'create'
        run: |
          base_username="${{ github.event.inputs.username }}"
          user_count="${{ github.event.inputs.user_count }}"
          
          echo "## Creating IAM Users" >> $GITHUB_STEP_SUMMARY
          
          for i in $(seq 1 $user_count); do
            if [ $user_count -eq 1 ]; then
              username="$base_username"
            else
              username="${base_username}-${i}"
            fi
            
            # Check if user already exists
            if aws iam get-user --user-name "$username" 2>/dev/null; then
              echo "⚠️ User $username already exists, skipping..." >> $GITHUB_STEP_SUMMARY
              continue
            fi
            
            # Create IAM user
            aws iam create-user --user-name "$username" --tags Key=Project,Value=AML-CC Key=Environment,Value=prod Key=ManagedBy,Value=GitHubActions
            
            # Attach AdministratorAccess policy
            aws iam attach-user-policy --user-name "$username" --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
            
            # Create access key
            access_key_output=$(aws iam create-access-key --user-name "$username")
            access_key_id=$(echo "$access_key_output" | jq -r '.AccessKey.AccessKeyId')
            secret_access_key=$(echo "$access_key_output" | jq -r '.AccessKey.SecretAccessKey')
            
            # Get user ARN
            user_arn=$(aws iam get-user --user-name "$username" --query 'User.Arn' --output text)
            
            echo "- ✅ Created user: $username" >> $GITHUB_STEP_SUMMARY
            echo "  - ARN: $user_arn" >> $GITHUB_STEP_SUMMARY
            echo "  - Access Key ID: $access_key_id" >> $GITHUB_STEP_SUMMARY
            echo "  - Secret Access Key: [HIDDEN - Check AWS Console]" >> $GITHUB_STEP_SUMMARY
            
            # Store credentials securely (you may want to use AWS Secrets Manager)
            echo "::add-mask::$secret_access_key"
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Security Note**: Access keys have been created. Please:" >> $GITHUB_STEP_SUMMARY
          echo "1. Retrieve secret keys from AWS Console immediately" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable MFA for all users" >> $GITHUB_STEP_SUMMARY
          echo "3. Follow principle of least privilege" >> $GITHUB_STEP_SUMMARY
      
      - name: Delete IAM Users
        if: github.event.inputs.action == 'delete'
        run: |
          base_username="${{ github.event.inputs.username }}"
          user_count="${{ github.event.inputs.user_count }}"
          
          echo "## Deleting IAM Users" >> $GITHUB_STEP_SUMMARY
          
          for i in $(seq 1 $user_count); do
            if [ $user_count -eq 1 ]; then
              username="$base_username"
            else
              username="${base_username}-${i}"
            fi
            
            # Check if user exists
            if ! aws iam get-user --user-name "$username" 2>/dev/null; then
              echo "⚠️ User $username does not exist, skipping..." >> $GITHUB_STEP_SUMMARY
              continue
            fi
            
            # Delete access keys
            access_keys=$(aws iam list-access-keys --user-name "$username" --query 'AccessKeyMetadata[].AccessKeyId' --output text)
            for key in $access_keys; do
              aws iam delete-access-key --user-name "$username" --access-key-id "$key"
            done
            
            # Detach policies
            attached_policies=$(aws iam list-attached-user-policies --user-name "$username" --query 'AttachedPolicies[].PolicyArn' --output text)
            for policy in $attached_policies; do
              aws iam detach-user-policy --user-name "$username" --policy-arn "$policy"
            done
            
            # Delete inline policies
            inline_policies=$(aws iam list-user-policies --user-name "$username" --query 'PolicyNames' --output text)
            for policy in $inline_policies; do
              aws iam delete-user-policy --user-name "$username" --policy-name "$policy"
            done
            
            # Delete user
            aws iam delete-user --user-name "$username"
            
            echo "- ✅ Deleted user: $username" >> $GITHUB_STEP_SUMMARY
          done
      
      - name: List IAM Users
        if: github.event.inputs.action == 'list'
        run: |
          echo "## Current IAM Users" >> $GITHUB_STEP_SUMMARY
          
          # List all users with AML prefix or specified username
          users=$(aws iam list-users --query 'Users[?starts_with(UserName, `aml-`) || starts_with(UserName, `${{ github.event.inputs.username }}`)].[UserName,Arn,CreateDate]' --output json)
          
          if [ "$users" = "[]" ]; then
            echo "No matching IAM users found." >> $GITHUB_STEP_SUMMARY
          else
            echo "| Username | ARN | Created Date |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-----|--------------|" >> $GITHUB_STEP_SUMMARY
            echo "$users" | jq -r '.[] | "| \(.[0]) | \(.[1]) | \(.[2]) |"' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Security Check
        run: |
          echo "## Security Validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Using OIDC authentication (no hardcoded credentials)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ IAM operations logged via CloudTrail" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Workflow requires manual approval" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **Remember**: Enable MFA for created users" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **Remember**: Review and apply least privilege policies" >> $GITHUB_STEP_SUMMARY