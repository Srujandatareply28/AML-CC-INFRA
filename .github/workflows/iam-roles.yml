name: AWS IAM User Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options:
          - create
          - delete
          - list
      username:
        description: 'Base username for IAM user(s) (used when email_addresses is not provided)'
        required: false
        default: 'aml-user'
        type: string
      user_count:
        description: 'Number of users to create (used when email_addresses is not provided)'
        required: false
        default: '1'
        type: string
      email_addresses:
        description: 'Comma-separated email addresses for username generation (e.g., user1@example.com,user2@example.com). Usernames will be created as aml-{part-before-@}.'
        required: false
        default: ''
        type: string
      create_security_groups:
        description: 'Create security groups for users'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      security_group_type:
        description: 'Type of security groups to create'
        required: false
        default: 'web'
        type: choice
        options:
          - web
          - database
          - application
          - all
      vpc_id:
        description: 'VPC ID for security groups (leave empty for default VPC)'
        required: false
        type: string

env:
  AWS_REGION: eu-west-2

jobs:
  iam-management:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Validate inputs
        run: |
          if [[ "${{ github.event.inputs.action }}" == "create" || "${{ github.event.inputs.action }}" == "delete" ]]; then
            if [[ -z "${{ github.event.inputs.username }}" ]]; then
              echo "Error: Username is required for create/delete actions"
              exit 1
            fi
            
            user_count="${{ github.event.inputs.user_count }}"
            if ! [[ "$user_count" =~ ^[1-9]$|^10$ ]]; then
              echo "Error: User count must be between 1 and 10"
              exit 1
            fi
          fi
      
      - name: Create IAM User Group
        if: github.event.inputs.action == 'create'
        run: |
          echo "Creating IAM user group: AML-CC-DEV"
          
          # Check if group already exists
          if aws iam get-group --group-name AML-CC-DEV >/dev/null 2>&1; then
            echo "✅ Group AML-CC-DEV already exists"
          else
            # Create the group
            aws iam create-group --group-name AML-CC-DEV --path /
            echo "✅ Created IAM group: AML-CC-DEV"
          fi
          
          # Attach policies to the group based on security group settings
          if [[ "${{ github.event.inputs.create_security_groups }}" == "true" ]]; then
            echo "Will attach custom AML-CC policy to group later"
          else
            # Attach AdministratorAccess to the group
            aws iam attach-group-policy --group-name AML-CC-DEV --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
            echo "✅ Attached AdministratorAccess policy to AML-CC-DEV group"
          fi

      - name: Create Security Groups
        if: github.event.inputs.action == 'create' && github.event.inputs.create_security_groups == 'true'
        run: |
          base_username="${{ github.event.inputs.username }}"
          sg_type="${{ github.event.inputs.security_group_type }}"
          vpc_id="${{ github.event.inputs.vpc_id }}"
          
          # Get default VPC if not specified
          if [[ -z "$vpc_id" ]]; then
            vpc_id=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
            if [[ "$vpc_id" == "None" ]]; then
              echo "Error: No default VPC found. Please specify a VPC ID."
              exit 1
            fi
            echo "Using default VPC: $vpc_id"
          fi
          
          echo "## Creating Security Groups" >> $GITHUB_STEP_SUMMARY
          
          # Function to create security group
          create_sg() {
            local sg_name="$1"
            local description="$2"
            local rules="$3"
            
            # Check if security group already exists
            existing_sg=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=$sg_name" "Name=vpc-id,Values=$vpc_id" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
            
            if [[ "$existing_sg" != "None" ]]; then
              echo "⚠️ Security group $sg_name already exists: $existing_sg" >> $GITHUB_STEP_SUMMARY
              echo "$existing_sg"
              return
            fi
            
            # Create security group
            sg_id=$(aws ec2 create-security-group --group-name "$sg_name" --description "$description" --vpc-id "$vpc_id" --query 'GroupId' --output text)
            
            # Add tags
            aws ec2 create-tags --resources "$sg_id" --tags Key=Project,Value=AML-CC Key=Environment,Value=prod Key=ManagedBy,Value=GitHubActions Key=CreatedFor,Value="$base_username"
            
            # Add rules based on type
            case "$rules" in
              "web")
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 80 --cidr 0.0.0.0/0
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 443 --cidr 0.0.0.0/0
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 22 --cidr 10.0.0.0/8
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 22 --cidr 172.16.0.0/12
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 22 --cidr 192.168.0.0/16
                ;;
              "database")
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 3306 --cidr 10.0.0.0/8
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 5432 --cidr 10.0.0.0/8
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 1433 --cidr 10.0.0.0/8
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 27017 --cidr 10.0.0.0/8
                ;;
              "application")
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 8080 --cidr 10.0.0.0/8
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 8443 --cidr 10.0.0.0/8
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 9000 --cidr 10.0.0.0/8
                aws ec2 authorize-security-group-ingress --group-id "$sg_id" --protocol tcp --port 22 --cidr 10.0.0.0/8
                ;;
            esac
            
            echo "- ✅ Created security group: $sg_name ($sg_id)" >> $GITHUB_STEP_SUMMARY
            echo "$sg_id"
          }
          
          # Create security groups based on type
          if [[ "$sg_type" == "all" ]]; then
            web_sg=$(create_sg "${base_username}-web-sg" "Web tier security group for $base_username" "web")
            db_sg=$(create_sg "${base_username}-db-sg" "Database tier security group for $base_username" "database")
            app_sg=$(create_sg "${base_username}-app-sg" "Application tier security group for $base_username" "application")
            echo "WEB_SG_ID=$web_sg" >> $GITHUB_ENV
            echo "DB_SG_ID=$db_sg" >> $GITHUB_ENV
            echo "APP_SG_ID=$app_sg" >> $GITHUB_ENV
          else
            sg_id=$(create_sg "${base_username}-${sg_type}-sg" "${sg_type^} tier security group for $base_username" "$sg_type")
            echo "SG_ID=$sg_id" >> $GITHUB_ENV
          fi
      
      - name: Create IAM Users
        if: github.event.inputs.action == 'create'
        run: |
          email_addresses="${{ github.event.inputs.email_addresses }}"
          base_username="${{ github.event.inputs.username }}"
          user_count="${{ github.event.inputs.user_count }}"
          
          echo "## Creating IAM Users" >> $GITHUB_STEP_SUMMARY
          
          # Initialize arrays for storing user details
          declare -a usernames
          declare -a passwords
          declare -a emails
          
          if [[ -n "$email_addresses" && "$email_addresses" != "" ]]; then
            echo "Creating IAM users based on email addresses: $email_addresses"
            
            # Split email addresses by comma
            IFS=',' read -ra EMAIL_ARRAY <<< "$email_addresses"
            
            for email in "${EMAIL_ARRAY[@]}"; do
              # Trim whitespace
              email=$(echo "$email" | xargs)
              
              # Extract username from email (part before @)
               username=$(echo "$email" | cut -d'@' -f1)
               
               # Add prefix to make it unique
               username="aml-${username}"
              
              echo "Creating user: $username for email: $email"
              
              # Check if user already exists
              if aws iam get-user --user-name "$username" 2>/dev/null; then
                echo "⚠️ User $username already exists, skipping..." >> $GITHUB_STEP_SUMMARY
                continue
              fi
              
              # Generate random password
              password=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-12)
              
              # Create IAM user with tags
              aws iam create-user --user-name "$username" --tags Key=Project,Value=AML-CC Key=Environment,Value=prod Key=ManagedBy,Value=GitHubActions Key=Email,Value="$email"
              
              # Create login profile with generated password
              aws iam create-login-profile --user-name "$username" --password "$password" --password-reset-required
              
              # Store details for later use
              usernames+=("$username")
              passwords+=("$password")
              emails+=("$email")
              
              echo "✅ Created user: $username with login profile"
            done
          else
            echo "Creating $user_count IAM user(s) with base name: $base_username"
            
            for i in $(seq 1 $user_count); do
              if [ $user_count -eq 1 ]; then
                username="$base_username"
              else
                username="${base_username}-${i}"
              fi
              
              # Check if user already exists
              if aws iam get-user --user-name "$username" 2>/dev/null; then
                echo "⚠️ User $username already exists, skipping..." >> $GITHUB_STEP_SUMMARY
                continue
              fi
              
              # Generate random password
              password=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-12)
              
              # Create IAM user with tags
              aws iam create-user --user-name "$username" --tags Key=Project,Value=AML-CC Key=Environment,Value=prod Key=ManagedBy,Value=GitHubActions
              
              # Create login profile with generated password
              aws iam create-login-profile --user-name "$username" --password "$password" --password-reset-required
              
              # Store details for later use
              usernames+=("$username")
              passwords+=("$password")
              emails+=("")
              
              echo "✅ Created user: $username with login profile"
            done
          fi
          
          # Export arrays as environment variables for next steps
          printf '%s\n' "${usernames[@]}" > /tmp/usernames.txt
          printf '%s\n' "${passwords[@]}" > /tmp/passwords.txt
          printf '%s\n' "${emails[@]}" > /tmp/emails.txt
          
          echo "USER_COUNT=${#usernames[@]}" >> $GITHUB_ENV
          
          # Continue with policy attachment and group assignment for each created user
           for username in "${usernames[@]}"; do
             
             # Add user to AML-CC-DEV group
             aws iam add-user-to-group --group-name AML-CC-DEV --user-name "$username"
             echo "✅ Added $username to AML-CC-DEV group"
             
             # Create custom IAM policy for specific AWS services only (S3, SageMaker, Lambda, QuickSight, ECS)
             if [[ "${{ github.event.inputs.create_security_groups }}" == "true" ]]; then
              policy_document=$(cat <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:*"
      ],
      "Resource": "*",
      "Sid": "S3FullAccess"
    },
    {
      "Effect": "Allow",
      "Action": [
        "sagemaker:*"
      ],
      "Resource": "*",
      "Sid": "SageMakerFullAccess"
    },
    {
      "Effect": "Allow",
      "Action": [
        "lambda:*"
      ],
      "Resource": "*",
      "Sid": "LambdaFullAccess"
    },
    {
      "Effect": "Allow",
      "Action": [
        "quicksight:*"
      ],
      "Resource": "*",
      "Sid": "QuickSightFullAccess"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ecs:*"
      ],
      "Resource": "*",
      "Sid": "ECSFullAccess"
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:PassRole",
        "iam:ListRoles",
        "iam:GetRole"
      ],
      "Resource": "*",
      "Sid": "IAMPassRoleAccess"
    },
    {
      "Effect": "Allow",
      "Action": [
        "logs:*",
        "cloudwatch:*"
      ],
      "Resource": "*",
      "Sid": "LogsAndMonitoringAccess"
    }
  ]
}
EOF
              )
              
              # Create custom policy
              policy_arn=$(aws iam create-policy --policy-name "${username}-AML-CC-Policy" --policy-document "$policy_document" --query 'Policy.Arn' --output text 2>/dev/null || aws iam get-policy --policy-arn "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/${username}-AML-CC-Policy" --query 'Policy.Arn' --output text)
              
              # Attach custom policy
              aws iam attach-user-policy --user-name "$username" --policy-arn "$policy_arn"
            else
              # Attach AdministratorAccess policy (original behavior)
              aws iam attach-user-policy --user-name "$username" --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
            fi
            
            # Create access key
            access_key_output=$(aws iam create-access-key --user-name "$username")
            access_key_id=$(echo "$access_key_output" | jq -r '.AccessKey.AccessKeyId')
            secret_access_key=$(echo "$access_key_output" | jq -r '.AccessKey.SecretAccessKey')
            
            # Get user ARN
            user_arn=$(aws iam get-user --user-name "$username" --query 'User.Arn' --output text)
            
            echo "- ✅ Created user: $username" >> $GITHUB_STEP_SUMMARY
            echo "  - ARN: $user_arn" >> $GITHUB_STEP_SUMMARY
            echo "  - Access Key ID: $access_key_id" >> $GITHUB_STEP_SUMMARY
            echo "  - Secret Access Key: [HIDDEN - Check AWS Console]" >> $GITHUB_STEP_SUMMARY
            
            # Add security group information if created
            if [[ "${{ github.event.inputs.create_security_groups }}" == "true" ]]; then
              echo "  - Security Groups:" >> $GITHUB_STEP_SUMMARY
              if [[ "${{ github.event.inputs.security_group_type }}" == "all" ]]; then
                echo "    - Web SG: ${WEB_SG_ID:-N/A}" >> $GITHUB_STEP_SUMMARY
                echo "    - Database SG: ${DB_SG_ID:-N/A}" >> $GITHUB_STEP_SUMMARY
                echo "    - Application SG: ${APP_SG_ID:-N/A}" >> $GITHUB_STEP_SUMMARY
              else
                echo "    - ${{ github.event.inputs.security_group_type }} SG: ${SG_ID:-N/A}" >> $GITHUB_STEP_SUMMARY
              fi
              echo "  - Policy: Custom AML-CC Policy (restricted to assigned security groups)" >> $GITHUB_STEP_SUMMARY
            else
              echo "  - Policy: AdministratorAccess (full AWS access)" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Store credentials securely (you may want to use AWS Secrets Manager)
            echo "::add-mask::$secret_access_key"
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
           echo "## User Credentials File" >> $GITHUB_STEP_SUMMARY
           
           # Create credentials file for download
           credentials_file="aws-user-credentials-$(date +%Y%m%d-%H%M%S).txt"
           
           # Read the stored arrays
           readarray -t usernames < /tmp/usernames.txt
           readarray -t passwords < /tmp/passwords.txt
           readarray -t emails < /tmp/emails.txt
           
           # Create credentials file header
           cat > "$credentials_file" << EOF
===========================================
AWS IAM User Credentials - AML-CC-DEV
Generated: $(date)
===========================================

EOF
           
           # Add credentials to file
           for i in "${!usernames[@]}"; do
             username="${usernames[$i]}"
             password="${passwords[$i]}"
             email="${emails[$i]}"
             
             cat >> "$credentials_file" << EOF
User #$((i+1)):
  Email: $email
  Username: $username
  Password: $password
  Sign-in URL: https://console.aws.amazon.com/
  Note: Password must be changed on first login

-------------------------------------------

EOF
           done
           
           # Add footer
           cat >> "$credentials_file" << EOF
Total Users Created: ${#usernames[@]}
Group: AML-CC-DEV
Access Level: $(if [[ \"${{ github.event.inputs.create_security_groups }}\" == \"true\" ]]; then echo \"Service-Specific (5 AWS services)\"; else echo \"Full AWS Access (AdministratorAccess)\"; fi)

EOF
           
           echo "📄 Credentials file created: $credentials_file" >> $GITHUB_STEP_SUMMARY
           echo "📁 File contains login details for ${#usernames[@]} users" >> $GITHUB_STEP_SUMMARY
           echo "💾 Download this file from the workflow artifacts" >> $GITHUB_STEP_SUMMARY
           
           # Store filename for artifact upload
           echo "CREDENTIALS_FILE=$credentials_file" >> $GITHUB_ENV
           
           echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Security Note**: Access keys have been created. Please:" >> $GITHUB_STEP_SUMMARY
          echo "1. Retrieve secret keys from AWS Console immediately" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable MFA for all users" >> $GITHUB_STEP_SUMMARY
          echo "3. Follow principle of least privilege" >> $GITHUB_STEP_SUMMARY
      
      - name: Upload Credentials File
        if: github.event.inputs.action == 'create' && env.CREDENTIALS_FILE != ''
        uses: actions/upload-artifact@v4
        with:
          name: aws-user-credentials
          path: ${{ env.CREDENTIALS_FILE }}
          retention-days: 7
      
      - name: Delete IAM Users
        if: github.event.inputs.action == 'delete'
        run: |
          base_username="${{ github.event.inputs.username }}"
          user_count="${{ github.event.inputs.user_count }}"
          
          echo "## Deleting IAM Users" >> $GITHUB_STEP_SUMMARY
          
          for i in $(seq 1 $user_count); do
            if [ $user_count -eq 1 ]; then
              username="$base_username"
            else
              username="${base_username}-${i}"
            fi
            
            # Check if user exists
            if ! aws iam get-user --user-name "$username" 2>/dev/null; then
              echo "⚠️ User $username does not exist, skipping..." >> $GITHUB_STEP_SUMMARY
              continue
            fi
            
            # Delete access keys
            access_keys=$(aws iam list-access-keys --user-name "$username" --query 'AccessKeyMetadata[].AccessKeyId' --output text)
            for key in $access_keys; do
              aws iam delete-access-key --user-name "$username" --access-key-id "$key"
            done
            
            # Detach policies
            attached_policies=$(aws iam list-attached-user-policies --user-name "$username" --query 'AttachedPolicies[].PolicyArn' --output text)
            for policy in $attached_policies; do
              aws iam detach-user-policy --user-name "$username" --policy-arn "$policy"
            done
            
            # Delete inline policies
            inline_policies=$(aws iam list-user-policies --user-name "$username" --query 'PolicyNames' --output text)
            for policy in $inline_policies; do
              aws iam delete-user-policy --user-name "$username" --policy-name "$policy"
            done
            
            # Delete custom policy if it exists
            policy_arn="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/${username}-AML-CC-Policy"
            if aws iam get-policy --policy-arn "$policy_arn" 2>/dev/null; then
              aws iam delete-policy --policy-arn "$policy_arn"
            fi
            
            # Delete user
            aws iam delete-user --user-name "$username"
            
            echo "- ✅ Deleted user: $username" >> $GITHUB_STEP_SUMMARY
      
      - name: Delete Security Groups
        if: github.event.inputs.action == 'delete' && github.event.inputs.create_security_groups == 'true'
        run: |
          base_username="${{ github.event.inputs.username }}"
          user_count="${{ github.event.inputs.user_count }}"
          sg_type="${{ github.event.inputs.security_group_type }}"
          vpc_id="${{ github.event.inputs.vpc_id }}"
          
          # Get default VPC if not specified
          if [[ -z "$vpc_id" ]]; then
            vpc_id=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
          fi
          
          echo "## Deleting Security Groups" >> $GITHUB_STEP_SUMMARY
          
          # Function to delete security group
          delete_sg() {
            local sg_name="$1"
            
            # Get security group ID
            sg_id=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=$sg_name" "Name=vpc-id,Values=$vpc_id" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || echo "None")
            
            if [[ "$sg_id" == "None" ]]; then
              echo "⚠️ Security group $sg_name not found" >> $GITHUB_STEP_SUMMARY
              return
            fi
            
            # Check if security group is in use
            instances_using_sg=$(aws ec2 describe-instances --filters "Name=instance.group-id,Values=$sg_id" "Name=instance-state-name,Values=running,pending,stopping,stopped" --query 'Reservations[].Instances[].InstanceId' --output text)
            
            if [[ -n "$instances_using_sg" ]]; then
              echo "⚠️ Security group $sg_name ($sg_id) is in use by instances: $instances_using_sg" >> $GITHUB_STEP_SUMMARY
              echo "   Cannot delete security group while in use" >> $GITHUB_STEP_SUMMARY
              return
            fi
            
            # Delete security group
            aws ec2 delete-security-group --group-id "$sg_id"
            echo "- ✅ Deleted security group: $sg_name ($sg_id)" >> $GITHUB_STEP_SUMMARY
          }
          
          # Delete security groups based on type
          if [[ "$sg_type" == "all" ]]; then
            delete_sg "${base_username}-web-sg"
            delete_sg "${base_username}-db-sg"
            delete_sg "${base_username}-app-sg"
          else
            delete_sg "${base_username}-${sg_type}-sg"
          fi
          done
      
      - name: List IAM Users
        if: github.event.inputs.action == 'list'
        run: |
          echo "## Current IAM Users" >> $GITHUB_STEP_SUMMARY
          
          # List all users with AML prefix or specified username
          users=$(aws iam list-users --query 'Users[?starts_with(UserName, `aml-`) || starts_with(UserName, `${{ github.event.inputs.username }}`)].[UserName,Arn,CreateDate]' --output json)
          
          if [ "$users" = "[]" ]; then
            echo "No matching IAM users found." >> $GITHUB_STEP_SUMMARY
          else
            echo "| Username | ARN | Created Date |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-----|--------------|" >> $GITHUB_STEP_SUMMARY
            echo "$users" | jq -r '.[] | "| \(.[0]) | \(.[1]) | \(.[2]) |"' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Security Check
        run: |
          echo "## Security Validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Using AWS credentials authentication (secure secret management)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ IAM operations logged via CloudTrail" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Workflow requires manual approval" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.create_security_groups }}" == "true" ]]; then
            echo "- ✅ Service-Specific Access: Access restricted to S3, SageMaker, Lambda, QuickSight, and ECS only" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Custom IAM policies with least privilege principles" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Limited to 5 AWS services vs 200+ available services" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ **Warning**: Users have AdministratorAccess (full AWS access)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- ⚠️ **Remember**: Enable MFA for created users" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **Remember**: Regularly rotate access keys" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ **Remember**: Monitor CloudTrail logs for unusual activity" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## User Group Information" >> $GITHUB_STEP_SUMMARY
          echo "👥 **Group Name**: AML-CC-DEV" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Group Policy**: $(if [[ \"${{ github.event.inputs.create_security_groups }}\" == \"true\" ]]; then echo \"Custom Service-Specific Policy\"; else echo \"AdministratorAccess\"; fi)" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Members**: All created IAM users are automatically added to this group" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## AWS Services Access Summary" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.create_security_groups }}" == "true" ]]; then
            echo "**With Security Groups (Restricted Access):**" >> $GITHUB_STEP_SUMMARY
            echo "- **S3**: Full access to all S3 buckets and objects" >> $GITHUB_STEP_SUMMARY
            echo "- **SageMaker**: Complete access to all SageMaker services (including Model Registry)" >> $GITHUB_STEP_SUMMARY
            echo "- **Lambda**: Full access to all Lambda functions and layers" >> $GITHUB_STEP_SUMMARY
            echo "- **QuickSight**: Complete access to all QuickSight resources" >> $GITHUB_STEP_SUMMARY
            echo "- **ECS**: Full access to all Elastic Container Service resources" >> $GITHUB_STEP_SUMMARY
            echo "- **CloudWatch & Logs**: Full monitoring and logging access" >> $GITHUB_STEP_SUMMARY
            echo "- **IAM**: Limited to PassRole, ListRoles, and GetRole permissions" >> $GITHUB_STEP_SUMMARY
          else
            echo "**With AdministratorAccess (Full Access):**" >> $GITHUB_STEP_SUMMARY
            echo "- **All AWS Services**: Complete access to all AWS services and resources" >> $GITHUB_STEP_SUMMARY
            echo "- **EC2**: Full compute service access" >> $GITHUB_STEP_SUMMARY
            echo "- **S3**: All storage service access" >> $GITHUB_STEP_SUMMARY
            echo "- **IAM**: Full identity and access management" >> $GITHUB_STEP_SUMMARY
            echo "- **VPC**: Complete networking service access" >> $GITHUB_STEP_SUMMARY
            echo "- **RDS**: Full database service access" >> $GITHUB_STEP_SUMMARY
            echo "- **Lambda**: Complete serverless compute access" >> $GITHUB_STEP_SUMMARY
            echo "- **CloudFormation**: Full infrastructure as code access" >> $GITHUB_STEP_SUMMARY
            echo "- **And 200+ other AWS services..." >> $GITHUB_STEP_SUMMARY
          fi